CREATE TABLE Tenant (
  tenantId UNIQUEIDENTIFIER NOT NULL PRIMARY KEY,
  name NVARCHAR(200) NOT NULL,
  locale NVARCHAR(10) NOT NULL DEFAULT 'en-US',
  timezone NVARCHAR(50) NOT NULL DEFAULT 'America/Los_Angeles',
  currency NVARCHAR(3) NOT NULL DEFAULT 'USD',
  createdAt DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME()
);

CREATE TABLE [User] (
  userId UNIQUEIDENTIFIER NOT NULL PRIMARY KEY,
  tenantId UNIQUEIDENTIFIER NOT NULL,
  name NVARCHAR(200) NOT NULL,
  email NVARCHAR(320) NOT NULL,
  role NVARCHAR(20) NOT NULL CHECK (role IN ('ADMIN','EMPLOYEE')),
  externalId NVARCHAR(100) NULL, -- Azure AD object id later
  status NVARCHAR(20) NOT NULL DEFAULT 'ACTIVE',
  createdAt DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
  CONSTRAINT FK_User_Tenant FOREIGN KEY (tenantId) REFERENCES Tenant(tenantId)
);

CREATE TABLE Wallet (
  walletId UNIQUEIDENTIFIER NOT NULL PRIMARY KEY,
  userId UNIQUEIDENTIFIER NOT NULL UNIQUE,
  balancePoints INT NOT NULL DEFAULT 0,
  updatedAt DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
  CONSTRAINT FK_Wallet_User FOREIGN KEY (userId) REFERENCES [User](userId)
);

CREATE TABLE Allocation (
  allocationId UNIQUEIDENTIFIER NOT NULL PRIMARY KEY,
  walletId UNIQUEIDENTIFIER NOT NULL,
  points INT NOT NULL CHECK (points >= 0),
  periodStart DATE NOT NULL,
  periodEnd DATE NOT NULL,
  createdAt DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
  CONSTRAINT FK_Allocation_Wallet FOREIGN KEY (walletId) REFERENCES Wallet(walletId)
);

CREATE TABLE Transfer (
  transferId UNIQUEIDENTIFIER NOT NULL PRIMARY KEY,
  fromWalletId UNIQUEIDENTIFIER NOT NULL,
  toWalletId UNIQUEIDENTIFIER NOT NULL,
  points INT NOT NULL CHECK (points > 0),
  message NVARCHAR(500) NULL,
  isPublic BIT NOT NULL DEFAULT 1,
  createdAt DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
  CONSTRAINT FK_Transfer_From FOREIGN KEY (fromWalletId) REFERENCES Wallet(walletId),
  CONSTRAINT FK_Transfer_To FOREIGN KEY (toWalletId) REFERENCES Wallet(walletId),
  CONSTRAINT CHK_NoSelfTransfer CHECK (fromWalletId <> toWalletId)
);

CREATE TABLE CatalogItem (
  catalogItemId UNIQUEIDENTIFIER NOT NULL PRIMARY KEY,
  tenantId UNIQUEIDENTIFIER NULL, -- null means global
  name NVARCHAR(200) NOT NULL,
  vendorCode NVARCHAR(100) NOT NULL,
  denominationUSD DECIMAL(10,2) NOT NULL,
  isActive BIT NOT NULL DEFAULT 1
);

CREATE TABLE Redemption (
  redemptionId UNIQUEIDENTIFIER NOT NULL PRIMARY KEY,
  walletId UNIQUEIDENTIFIER NOT NULL,
  catalogItemId UNIQUEIDENTIFIER NOT NULL,
  points INT NOT NULL CHECK (points > 0),
  usdValue DECIMAL(10,2) NOT NULL,
  status NVARCHAR(20) NOT NULL CHECK (status IN ('REQUESTED','FULFILLED','FAILED')) DEFAULT 'REQUESTED',
  vendorRef NVARCHAR(100) NULL,
  createdAt DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
  fulfilledAt DATETIME2 NULL,
  CONSTRAINT FK_Redemption_Wallet FOREIGN KEY (walletId) REFERENCES Wallet(walletId),
  CONSTRAINT FK_Redemption_Catalog FOREIGN KEY (catalogItemId) REFERENCES CatalogItem(catalogItemId)
);

CREATE TABLE AuditLog (
  auditId BIGINT IDENTITY(1,1) PRIMARY KEY,
  actorUserId UNIQUEIDENTIFIER NULL,
  actionType NVARCHAR(50) NOT NULL,
  entityType NVARCHAR(50) NOT NULL,
  entityId NVARCHAR(100) NOT NULL,
  details NVARCHAR(MAX) NULL,
  createdAt DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME()
);

CREATE INDEX IX_User_TenantEmail ON [User](tenantId, email);
CREATE INDEX IX_Transfer_From ON Transfer(fromWalletId, createdAt DESC);
CREATE INDEX IX_Transfer_To ON Transfer(toWalletId, createdAt DESC);